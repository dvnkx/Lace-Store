{"version":3,"file":"static/js/229.08e9f827.chunk.js","mappings":"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","sources":["helpers/AccountReducer.js","../node_modules/date-fns/esm/fromUnixTime/index.js","helpers/getDate.js","../node_modules/date-fns/esm/getDate/index.js","../node_modules/date-fns/esm/getMonth/index.js","../node_modules/date-fns/esm/getYear/index.js","helpers/AccountData.js","pages/Account/Account.jsx"],"sourcesContent":["export const toggleAccountReducer = (state, action) => {\n  switch (action.type) {\n    case \"data\": {\n      return { ...state, data: !state.data };\n    }\n    case \"address\": {\n      return { ...state, address: !state.address };\n    }\n    case \"password\": {\n      return { ...state, password: !state.password };\n    }\n    default:\n      return console.log(Error(`Unknowm action: ${action.type}`));\n  }\n};\n","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import fromUnixTime from \"date-fns/fromUnixTime\";\nimport getDate from \"date-fns/getDate\";\nimport getMonth from \"date-fns/getMonth\";\nimport getYear from \"date-fns/getYear\";\n\nexport const getBirthdayDate = (date) => {\n  const day = getDate(fromUnixTime(date));\n  const month = getMonth(fromUnixTime(date)) + 1;\n  const year = getYear(fromUnixTime(date));\n\n  return day + \".\" + month + \".\" + year;\n};\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","export const passwordData = [\"********\"];\nexport const shipData = [\"None\"];\n","import React, { useReducer } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./styles.css\";\n\nimport { toggleAccountReducer } from \"../../helpers/AccountReducer\";\nimport { getBirthdayDate } from \"../../helpers/getDate\";\n\nimport { account } from \"../../assets/index\";\n\nimport { SideNav } from \"../../components/routes/index\";\n\nimport {\n  AccountBlock,\n  UserPasswordBlock,\n  UserDataBlock,\n  UserAddressBlock,\n} from \"../../components/ui/index\";\n\nimport { passwordData } from \"../../helpers/AccountData\";\n\nconst Account = () => {\n  const [state, dispatch] = useReducer(toggleAccountReducer, {\n    data: false,\n    address: false,\n    password: false,\n  });\n\n  const { fullName, email, birthday, deliveryAddress, avatarUrl } = useSelector(\n    (state) => state.auth.data\n  );\n\n  const personalData = [\n    fullName,\n    email,\n    birthday ? getBirthdayDate(birthday) : \"09.09.1814\",\n  ];\n  const addressData = Object.values(deliveryAddress);\n\n  return (\n    <div className=\"account-container\">\n      {\n        <>\n          <SideNav avatar={avatarUrl ? avatarUrl : account} />\n          <div className=\"user-data-block\">\n            {!state.data ? (\n              <AccountBlock\n                setVisible={() => dispatch({ type: \"data\" })}\n                data={personalData}\n                section={\"Personal Data\"}\n              />\n            ) : (\n              <UserDataBlock setVisible={() => dispatch({ type: \"data\" })} />\n            )}\n          </div>\n          <div className=\"address-block\">\n            {!state.address ? (\n              <AccountBlock\n                setVisible={() => dispatch({ type: \"address\" })}\n                section={\"My shipping addresses\"}\n                data={addressData}\n              ></AccountBlock>\n            ) : (\n              <UserAddressBlock\n                setVisible={() => dispatch({ type: \"address\" })}\n              />\n            )}\n          </div>\n\n          <div className=\"password-block\">\n            {!state.password ? (\n              <AccountBlock\n                setVisible={() => dispatch({ type: \"password\" })}\n                section={\"Change Password\"}\n                data={passwordData}\n              />\n            ) : (\n              <UserPasswordBlock\n                setVisible={() => dispatch({ type: \"password\" })}\n              />\n            )}\n          </div>\n        </>\n      }\n    </div>\n  );\n};\n\nexport default Account;\n"],"names":["toggleAccountReducer","state","action","type","_objectSpread","data","address","password","console","log","Error","concat","fromUnixTime","dirtyUnixTime","requiredArgs","arguments","unixTime","toInteger","toDate","getBirthdayDate","date","day","dirtyDate","getDate","month","getMonth","year","getFullYear","getYear","passwordData","_useReducer","useReducer","_useReducer2","_slicedToArray","dispatch","_useSelector","useSelector","auth","fullName","email","birthday","deliveryAddress","avatarUrl","personalData","addressData","Object","values","_jsx","className","children","_jsxs","_Fragment","SideNav","avatar","account","UserDataBlock","setVisible","AccountBlock","section","UserAddressBlock","UserPasswordBlock"],"sourceRoot":""}